/* globals define */
define(["underscore", "backbone", "jquery", "codeInputFields"], function (_, Backbone, $, CodeInputFields) {

    var countDownInstance = null;

    var templateSettings = {
        'evaluate': /<#([\s\S]+?)#>/g,
        'interpolate': /<#=([\s\S]+?)#>/g,
        'escape': /<#-([\s\S]+?)#>/g
    };

    function CountDown(options) {
        var self = this;
        var countDownDate = new Date(options.date).getTime();
        this.start = function () {
            self.calculate();
            self.interval = setInterval(function () {
                self.calculate();
            }, 1000);
        }
        this.calculate = function () {
            var now = new Date().getTime();
            var distance = countDownDate - now;
            var oneHour = 1000 * 60 * 60;
            var days = Math.floor(distance / (oneHour * 24));
            var hours = Math.floor((distance % (oneHour * 24)) / (oneHour));
            var minutes = Math.floor((distance % (oneHour)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);
            if (distance < 0) {
                clearInterval(self.interval);
                if (options.finished) options.finished();
            }
            options.tick({
                days: days,
                hours: hours,
                minutes: minutes,
                seconds: seconds
            });
        }

        this.start();
    }

    var errorTranslate = function (code) {
        var codes = {
            'E_CAPTCHA_REQUIRED': 'Bitte gib die Zeichenkette ein!',
            'E_CAPTCHA_INVALID': 'Bitte gib die korrekte Zeichenkette ein!',
            'E_EMAIL_INVALID': 'Bitte gib eine gültige E-Mail-Adresse ein!',
            'E_TOTP_REQUIRED': 'Bitte gib Deinen Code ein!',
            'E_TOTP_INVALID': 'Der Code ist nicht gültig!',
            'E_TYPE_REQUIRED': 'Bitte wähl eine Option aus!',
            'E_TYPE_INVALID': 'Option ist nicht gültig.',
            'E_CODE_REQUIRED': 'Bitte gib Deinen Freischaltcode ein.',
            'E_CODE_INVALID': 'Dies ist kein gültiger Freischaltcode. Bitte überprüf Deine Eingabe.',
            'E_CODE_EXPIRED': 'Der Freischaltcode ist nicht gültig. Bitte überprüf Deine Eingabe.',
            'E_CODE_SMS_RENEW_LIMIT': 'Du hast für diese Mobilfunk-Nummer zu oft einen neuen Freischaltcode angefordert.',
            'E_CODE_MAX_TRIES': 'Du hast den Freischaltcode zu oft falsch eingegeben. Forder jetzt einen neuen Code an. Du bist kurz gesperrt. Danach geht’s wieder. Oder wähl eine andere Option und starte die Freischaltung nochmal.',
            'E_UNKNOWN_ERROR': 'Die Anfrage konnte leider nicht verarbeitet werden!',

            'E_PASSWORD_REQUIRED': 'Bitte gib Dein neues Passwort ein.',
            'E_CONFIRMATION_REQUIRED': 'Bitte bestätige Dein Passwort.',
            'E_PASSWORD_CONFIRM_ERROR': 'Die Bestätigung stimmt nicht mit dem Passwort überein.',
            'E_PASSWORD_TOO_LONG': 'Das Passwort ist zu lang.',
            'E_PASSWORD_TOO_SHORT': 'Das Passwort muss mindestens 8 Zeichen enthalten.',
            'E_PASSWORD_INVALID_CHARS': 'Das Passwort enthält nicht erlaubte Zeichen.',
            'E_PASSWORD_TOO_LITTLE_CHAR_GROUPS': 'Das Passwort muss mindestens einen Buchstaben, eine Zahl und ein Sonderzeichen enthalten.',
            'E_PASSWORD_SIMILAR_USERNAME': 'Das Passwort ähnelt Deinem Benutzernamen zu stark.',
            'E_PASSWORD_ALREADY_USED': 'Du hast dieses Passwort bereits kürzlich verwendet. Bitte gib ein anderes Passwort ein.',

        }
        return codes[code] ? codes[code] : codes['E_UNKNOWN_ERROR'];
    }

    function getTemplate(id) {
        return _.template($(id).html(), templateSettings);
    }

    var ForgotPasswordEmailModel = Backbone.Model.extend({
        defaults: {
            email: '',
            captcha: ''
        },
        validate: function (attrs) {
            var errors = [];
            if (!attrs.email) {
                errors.push({
                    message: errorTranslate('E_EMAIL_INVALID'),
                    el: 'email'
                });
            } else {
                if (!(/^[<a-zA-Z0-9!#$%&'*+\/=?\^_`{|}~\-]+(?:\.[a-zA-Z0-9!#$%&'*+\/=?\^_`{|}~\-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9>])?$/).test(attrs.email)) {
                    errors.push({
                        message: errorTranslate('E_EMAIL_INVALID'),
                        el: 'email'
                    });
                }
            }
            if (!attrs.captcha) {
                errors.push({ message: errorTranslate('E_CAPTCHA_REQUIRED'), el: 'captcha' });
            }
            return ((errors.length > 0) ? errors : false);
        }
    });

    var ForgotPasswordTotpModel = Backbone.Model.extend({
        defaults: {
            totp: ''
        },
        validate: function (attrs) {
            var errors = [];
            if (!attrs.totp) {
                errors.push({
                    message: errorTranslate('E_TOTP_REQUIRED'),
                    el: 'totp'
                });
            }
            return ((errors.length > 0) ? errors : false);
        }
    });

    var ForgotPasswordTypeModel = Backbone.Model.extend({
        defaults: {
            type: ''
        },
        validate: function (attrs) {
            var errors = [];
            if (!attrs.type) {
                errors.push({
                    message: errorTranslate('E_TYPE_REQUIRED'),
                    el: 'type'
                });
            }
            return ((errors.length > 0) ? errors : false);
        }
    });

    var ForgotPasswordCodeModel = Backbone.Model.extend({
        defaults: {
            code: ''
        },
        validate: function (attrs) {
            var errors = [];
            if (!attrs.code) {
                errors.push({
                    message: errorTranslate('E_CODE_REQUIRED'),
                    el: 'code'
                });
            }
            return ((errors.length > 0) ? errors : false);
        }
    });

    var ForgotPasswordResetModel = Backbone.Model.extend({
        defaults: {
            password: '',
            passwordRepeat: ''
        },
        validate: function (attrs) {

            var errors = [],
                regex = /^[a-zA-Z0-9_%\!\?\=\{\[\]\}\&\/\.\;\,\:\$\-\#]+$/i,
                mediumPassword = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[\-\!#\$%&_\+\=\{\}\[\]\:;\?,\.\/])[A-Za-z\d[\-\!#\$%&_\+\=\{\}\[\]\:;\?,\.\/]{8,64}$/i;

            if (!attrs.password) {
                errors.push({
                    message: errorTranslate('E_PASSWORD_REQUIRED'),
                    el: 'password'
                });
            } else {

                if (attrs.password.length > 64) {
                    errors.push({ message: errorTranslate('E_PASSWORD_TOO_LONG'), el: 'password' });
                }
                if (attrs.password.length < 8) {
                    errors.push({ message: errorTranslate('E_PASSWORD_TOO_SHORT'), el: 'password' });
                }
                if (!(regex.test(attrs.password))) {
                    errors.push({ message: errorTranslate('E_PASSWORD_INVALID_CHARS'), el: 'password' });
                } else if (!(mediumPassword.test(attrs.password))) {
                    errors.push({ message: errorTranslate('E_PASSWORD_TOO_LITTLE_CHAR_GROUPS'), el: 'password' });
                }
            }
            if (!attrs.passwordRepeat) {
                errors.push({
                    message: errorTranslate('E_CONFIRMATION_REQUIRED'),
                    el: 'password-repeat'
                });
            }
            else if (attrs.passwordRepeat !== attrs.password){
                errors.push({
                    message: errorTranslate('E_PASSWORD_CONFIRM_ERROR'),
                    el: 'password-repeat'
                });
            }
            return ((errors.length > 0) ? errors : false);
        }
    });


    var BaseView = Backbone.View.extend({
        onError: function (message, element, duration) {
            var error = $('<div class="error">' + message + '</div>');
            $('div[data-error="' + element + '"]', this.$el).append(error);
            setTimeout(function () {
                error.fadeOut({
                    complete: function () {
                        error.remove();
                    }
                });
            }, duration || 4000);
        },
        attachBaseListener: function () {
            var self = this;
            this.$el.find('input[type="text"], input[type="email"], input[type="password"]').on('keyup', function (e) {
                if (e.key === 'Enter') {
                    self.$el.find('[data-command="next-step"]').trigger('click');
                }
            });

            var focusElement = this.$el.find('[data-element="init-focus"]');
            if (focusElement) {
                setTimeout(function () { focusElement.focus() }, 10);
            }
        }

    })

    var ForgotPasswordView = Backbone.View.extend({
        initialize: function (options) {
            var self = this;
            this.options = options;
            this.steps = [ForgotPasswordStartView, ForgotPasswordEmailView, ForgotPasswordTotpView, ForgotPasswordVerificationOptionsView, ForgotPasswordVerificationCodeView, ForgotPasswordResetView, ForgotPasswordSuccessView];
            this.oldStep = 0;
            this.currentStep = 0;

            this.options.onPreviousStep = function () {
                self.oldStep = self.currentStep;
                self.currentStep = self.currentStep - 1;
                self.render();
            }
            this.options.onNextStep = function () {
                self.oldStep = self.currentStep;
                self.currentStep = self.currentStep + 1;
                self.render();
            }
            this.options.isNextStep = function () {
                return self.oldStep < self.currentStep;
            }
            this.options.isPreviousStep = function () {
                return self.oldStep > self.currentStep;
            }
        },
        render: function () {
            var view = new this.steps[this.currentStep](this.options);
            this.$el.html(view.render().$el);
            return this;
        }
    });


    var ForgotPasswordStartView = BaseView.extend({
        initialize: function (options) {
            this.options = options;
            this.template = getTemplate('#password-recover-start-template')
        },
        render: function () {
            this.$el.html(this.template.call(this));
            return this;
        },
        events: {
            'click [data-command="next-step"]': function (e) {
                this.options.onNextStep();
            },
            'click [data-command="previous-step"]': function (e) {
                this.options.onPreviousStep();
            },

        }
    });

    var ForgotPasswordEmailView = BaseView.extend({
        initialize: function (options) {
            this.options = options;
            this.model = new ForgotPasswordEmailModel();
            this.template = getTemplate('#password-recover-email-template')
        },
        render: function () {
            this.$el.html(this.template.call(this));
            this.attachBaseListener();
            return this;
        },
        captchaUrl: function () {
            return (this.options.captchaUrl + '?' + Math.random());
        },
        events: {
            'click input[name="captcha-new"]': function () {
                this.$('#' + this.cid + '-captcha-image').attr('src', this.captchaUrl());
            },
            'click [data-command="next-step"]': function (e) {
                var self = this;
                this.model.set({
                    email: $('input[name="emailAddress"]', this.$el).val().trim(),
                    captcha: $('input[name="captcha"]', this.$el).val().trim()
                });

                if (this.model.isValid()) {

                    $('.progress-container', self.$el).show();
                    $('[data-command="next-step"]', self.$el).prop('disabled', true);

                    $.ajax({
                        type: 'POST',
                        url: self.options.serviceUrl + '/RecoverOptions',
                        data: JSON.stringify(this.model),
                        contentType: "application/json; charset=utf-8",
                        complete: function () {
                            $('.progress-container', self.$el).hide();
                            $('[data-command="next-step"]', self.$el).prop('disabled', false);
                        },
                        success: function (data) {

                            if (data.d.state === 0) {
                                self.options.optionList = data.d.optionList;
                                self.options.isTwoFaEnabled = data.d.isTwoFaEnabled;

                                self.options.onNextStep();
                            } else {
                                if (data.d.code === 'E_CAPTCHA_INVALID') {
                                    self.onError(errorTranslate(data.d.code), 'captcha');
                                } else if (data.d.code === 'E_EMAIL_INVALID') {
                                    self.onError(errorTranslate(data.d.code), 'email');
                                } else if (data.d.code === 'E_NO_CONTACT') {
                                    self.template = getTemplate('#password-recover-email-no-contacts-template')
                                    self.render();

                                } else if (data.d.code === 'E_INVALID_USERLEVEL') {
                                    self.template = getTemplate('#password-recover-email-userlevel-template')
                                    self.render();

                                } else if (data.d.code === 'E_TWOFA_NOT_VERIFIED') {
                                    self.options.isTwoFaEnabled = true;
                                    self.options.onNextStep();
                                } else {
                                    self.onError(errorTranslate(data.d.code), 'recover');
                                }
                                    
                                $('[name="captcha-new"]', self.$el).trigger('click');
                                $('input[name="captcha"]', self.$el).val('')
                            }

                        }
                    });
                } else {
                    var errors = this.model.validationError;
                    _.each(errors, function (err) {
                        self.onError(err.message, err.el);
                    });
                }
            },
            'click [data-command="render-default"]': function (e) {
                this.template = getTemplate('#password-recover-email-template')
                this.render();
            },
            'click [data-command="previous-step"]': function (e) {
                this.options.onPreviousStep();
            },

        }
    });

    var ForgotPasswordTotpView = BaseView.extend({
        initialize: function (options) {
            this.options = options;
            this.model = new ForgotPasswordTotpModel();
            this.template = getTemplate('#password-recover-totp-template');
        },
        render: function () {
            var self = this;
            if (!this.options.isTwoFaEnabled) {
                setTimeout(function () {
                    if (self.options.isNextStep()) {
                        self.options.onNextStep();
                    } else if (self.options.isPreviousStep) {
                        self.options.onPreviousStep();
                    }
                }, 0);
            } else {
                this.$el.html(this.template.call(this));
                this.codeInputFields = new CodeInputFields($('#codeFields', this.$el)[0]);
                this.attachBaseListener();
            }

            return this;
        },
        events: {
            'click [data-command="next-step"]': function (e) {
                var self = this;
                this.model.set({
                    totp: this.codeInputFields.getCode()
                });

                if (this.model.isValid()) {

                    $('.progress-container', self.$el).show();
                    $('[data-command="next-step"]', self.$el).prop('disabled', true);

                    $.ajax({
                        type: 'POST',
                        url: self.options.serviceUrl + '/ValidateTotpCode',
                        data: JSON.stringify(this.model),
                        contentType: "application/json; charset=utf-8",
                        complete: function () {
                            $('.progress-container', self.$el).hide();
                            $('[data-command="next-step"]', self.$el).prop('disabled', false);
                        },
                        success: function (data) {

                            if (data.d.state === 0) {
                                self.options.optionList = data.d.optionList;
                                self.options.onNextStep();
                            } else {
                                self.codeInputFields.resetCode()
                                if (data.d.code === 'E_NO_CONTACT') {
                                    self.template = getTemplate('#password-recover-email-no-contacts-template')
                                    self.render();

                                } else if (data.d.code === 'E_TOTP_INVALID') {
                                    self.onError(errorTranslate(data.d.code), 'totp');

                                } else {
                                    self.onError(errorTranslate(data.d.code), 'recover');
                                }
                            }

                        }
                    });
                } else {
                    var errors = this.model.validationError;
                    _.each(errors, function (err) {
                        self.onError(err.message, err.el);
                    });
                }
            },
            'click [data-command="render-default"]': function (e) {
                this.template = getTemplate('#password-recover-totp-template')
                this.render();
            },
            'click [data-command="previous-step"]': function (e) {
                this.options.onPreviousStep();
            },

        }
    });

    var ForgotPasswordVerificationOptionsView = BaseView.extend({
        initialize: function (options) {
            this.options = options;
            this.model = new ForgotPasswordTypeModel();
            this.template = getTemplate('#password-recover-verification-options-template')
        },
        render: function () {
            this.$el.html(this.template.call(this));

            this.attachBaseListener();

            return this;
        },
        events: {
            'input input[name="type"]': function (e) {
                $('.option-item', this.$el).removeClass('active');
                $(e.currentTarget).parent().addClass('active');
            },
            'click [data-command="next-step"]': function (e) {
                var self = this;
                this.model.set({
                    type: $('input:radio[name=type]:checked', self.$el).val()
                });

                if (this.model.isValid()) {

                    $('.progress-container', self.$el).show();
                    $('[data-command="next-step"]', self.$el).prop('disabled', true);

                    $.ajax({
                        type: 'POST',
                        url: self.options.serviceUrl + '/SendRecoverCode',
                        data: JSON.stringify(this.model),
                        contentType: "application/json; charset=utf-8",
                        complete: function () {
                            $('.progress-container', self.$el).hide();
                            $('[data-command="next-step"]', self.$el).prop('disabled', false);
                        },
                        success: function (data) {
                            if (data.d.state === 0) {
                                self.options.type = self.model.get('type');
                                self.options.address = data.d.address;
                                self.options.config = data.d.config;
                                self.options.onNextStep();
                            } else if (data.d.code === 'E_CODE_SMS_RENEW_LIMIT') {
                                self.onError(errorTranslate(data.d.code), 'type');
                            } else {
                                self.onError(errorTranslate(data.d.code), 'recover');
                            }
                        }
                    });
                } else {
                    var errors = this.model.validationError;
                    _.each(errors, function (err) {
                        self.onError(err.message, err.el);
                    });
                }
            },
            'click [data-command="previous-step"]': function (e) {
                this.options.onPreviousStep();
            }
        }
    });

    var ForgotPasswordVerificationCodeView = BaseView.extend({
        initialize: function (options) {
            this.options = options;
            this.model = new ForgotPasswordCodeModel();
            this.template = getTemplate('#password-recover-verification-code-template')
        },
        render: function (disableCountDown) {
            var self = this;

            this.$el.html(this.template.call(this));

            if (countDownInstance) {
                clearInterval(countDownInstance.interval);
            }

            if (!disableCountDown) {
                var remainingTime = new Date(new Date(self.options.address.ValidationKeyCreated).getTime() + self.options.config.ValidationPeriodInMinutes * 60000);

                countDownInstance = new CountDown({
                    date: remainingTime,
                    tick: function (d) {
                        var minutes = d.minutes.toString();
                        var seconds = d.seconds.toString();
                        if (seconds.length === 1) {
                            seconds = '0' + seconds;
                        }
                        if (minutes.length === 1) {
                            minutes = '0' + minutes;
                        }

                        var restTime = minutes + ':' + seconds;

                        $('[data-element="remaining-time"]', self.$el).text(restTime);
                    },
                    finished: function () {
                        self.template = getTemplate('#password-recover-verification-code-expired-template')
                        self.render(true);
                    }
                });
            }
            this.codeInputFields = new CodeInputFields($('#codeFields', this.$el)[0]);
            this.attachBaseListener();

            return this;
        },
        events: {
            'click [data-command="resend-code"]': function (e) {
                var self = this;

                $('.progress-container', self.$el).show();
                $('[data-command="resend-code"]', self.$el).prop('disabled', true);

                var model = new ForgotPasswordTypeModel();
                model.set({
                    type: self.options.type
                });

                $.ajax({
                    type: 'POST',
                    url: self.options.serviceUrl + '/SendRecoverCode',
                    data: JSON.stringify(model),
                    contentType: "application/json; charset=utf-8",
                    complete: function () {
                        $('.progress-container', self.$el).hide();
                        $('[data-command="resend-code"]', self.$el).prop('disabled', false);
                    },
                    success: function (data) {
                        if (data.d.state === 0) {
                            self.options.address = data.d.address;
                            self.template = getTemplate('#password-recover-verification-code-template')
                            self.render();
                        }  else {
                            self.onError(errorTranslate(data.d.code), 'recover');
                        }
                    }
                });

            },
            'click [data-command="next-step"]': function (e) {
                var self = this;
                this.model.set({
                    code: this.codeInputFields.getCode(),
                    type: self.options.type
                });

                if (this.model.isValid()) {

                    $('.progress-container', self.$el).show();
                    $('[data-command="next-step"]', self.$el).prop('disabled', true);

                    $.ajax({
                        type: 'POST',
                        url: self.options.serviceUrl + '/ValidateRecoverCode',
                        data: JSON.stringify(this.model),
                        contentType: "application/json; charset=utf-8",
                        complete: function () {
                            $('.progress-container', self.$el).hide();
                            $('[data-command="next-step"]', self.$el).prop('disabled', false);
                        },
                        success: function (data) {
                            if (data.d.state === 0) {

                                if (countDownInstance) {
                                    clearInterval(countDownInstance.interval);
                                }

                                self.options.onNextStep();

                            } else if (data.d.code === 'E_CODE_MAX_TRIES') {
                                self.template = getTemplate('#password-recover-verification-code-max-tries-template')
                                self.render();
                            } else {
                                self.codeInputFields.resetCode()
                                self.onError(errorTranslate(data.d.code), 'recover');
                            }
                        }
                    });
                } else {
                    var errors = this.model.validationError;
                    _.each(errors, function (err) {
                        self.onError(err.message, err.el);
                    });
                }
            },
            'click [data-command="previous-step"]': function (e) {
                if (countDownInstance) {
                    clearInterval(countDownInstance.interval);
                }

                this.options.onPreviousStep();
            },

        }
    });

    var ForgotPasswordResetView = BaseView.extend({
        initialize: function (options) {
            this.options = options;
            this.model = new ForgotPasswordResetModel();
            this.template = getTemplate('#password-recover-reset-template')
        },
        render: function () {
            this.$el.html(this.template.call(this));
            this.attachBaseListener();
            return this;
        },
        events: {
            'click [data-command="next-step"]': function (e) {
                var self = this;

                this.model.set({
                    password: $('input[name="password"]', this.$el).val().trim(),
                    passwordRepeat: $('input[name="password-repeat"]', this.$el).val().trim()
                });

                if (this.model.isValid()) {

                    $('.progress-container', self.$el).show();
                    $('[data-command="next-step"]', self.$el).prop('disabled', true);

                    $.ajax({
                        type: 'POST',
                        url: self.options.serviceUrl + '/ResetPassword',
                        data: JSON.stringify(this.model),
                        contentType: "application/json; charset=utf-8",
                        complete: function () {
                            $('.progress-container', self.$el).hide();
                            $('[data-command="next-step"]', self.$el).prop('disabled', false);
                        },
                        success: function (data) {
                            if (data.d.state === 0) {
                                
                                self.options.onNextStep();

                            } else if (data.d.code === 'E_CODE_SMS_RENEW_LIMIT') {
                                self.onError(errorTranslate(data.d.code), 'type');
                            } else {
                                self.onError(errorTranslate(data.d.code), 'recover');
                            }
                        }
                    });
                } else {
                    var errors = this.model.validationError;
                    _.each(errors, function (err) {
                        self.onError(err.message, err.el);
                    });
                }
            },
            'click [data-command="previous-step"]': function (e) {
                this.options.onPreviousStep();
            }
        }
    });

    var ForgotPasswordSuccessView = BaseView.extend({
        initialize: function (options) {
            this.options = options;
            this.template = getTemplate('#password-recover-success-template')
        },
        render: function () {
            this.$el.html(this.template.call(this));
            return this;
        }
    });




    return ForgotPasswordView;
});